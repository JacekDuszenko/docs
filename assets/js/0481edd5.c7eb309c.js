"use strict";(self.webpackChunkmaester=self.webpackChunkmaester||[]).push([[4920],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=m(t),f=o,v=u["".concat(s,".").concat(f)]||u[f]||p[f]||i;return t?r.createElement(v,c(c({ref:n},l),{},{components:t})):r.createElement(v,c({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=u;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var m=2;m<i;m++)c[m]=t[m];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6446:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>m});var r=t(7462),o=(t(7294),t(3905));const i={title:"Enforce conventional commits",id:"enforce-conventional-commits"},c=void 0,a={unversionedId:"use-cases/enforce-conventional-commits",id:"use-cases/enforce-conventional-commits",title:"Enforce conventional commits",description:"Conventional commits is a specification for adding human and machine readable meaning to commit messages",source:"@site/docs/use-cases/enforce-conventional-commits.md",sourceDirName:"use-cases",slug:"/use-cases/enforce-conventional-commits",permalink:"/next/use-cases/enforce-conventional-commits",draft:!1,editUrl:"https://github.com/reviewpad/docs/tree/main/docs/use-cases/enforce-conventional-commits.md",tags:[],version:"current",frontMatter:{title:"Enforce conventional commits",id:"enforce-conventional-commits"},sidebar:"DocsSidebar",previous:{title:"Enforce branch conventions",permalink:"/next/use-cases/enforce-branch-conventions"},next:{title:"Reviewer Assignment",permalink:"/next/use-cases/reviewer-assignment"}},s={},m=[{value:"Enforce conventional commits",id:"enforce-conventional-commits",level:2}],l={toc:m};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0/"},"Conventional commits")," is a specification for adding human and machine readable meaning to commit messages"),(0,o.kt)("p",null,"Reviewpad can be used to check and provide an error message if a commit in a pull request do not comply with the conventional commits specification."),(0,o.kt)("h2",{id:"enforce-conventional-commits"},"Enforce conventional commits"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"api-version: reviewpad.com/v3.x\n\nworkflows:\n  - name: lint-commits\n    description: Lint commit messages\n    if:\n      - rule: '!$hasLinearHistory()'\n        extra-actions:\n          - '$warn(\"This pull request does not have linear history - please fix this!\")'\n      - rule: 'true'\n        extra-actions:\n          - '$commitLint()'\n")))}p.isMDXComponent=!0}}]);