"use strict";(self.webpackChunkmaester=self.webpackChunkmaester||[]).push([[4920],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=l(t),f=r,d=u["".concat(s,".").concat(f)]||u[f]||p[f]||a;return t?o.createElement(d,i(i({ref:n},m),{},{components:t})):o.createElement(d,i({ref:n},m))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6446:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={title:"Enforce conventional commits",id:"enforce-conventional-commits"},i=void 0,c={unversionedId:"use-cases/enforce-conventional-commits",id:"use-cases/enforce-conventional-commits",title:"Enforce conventional commits",description:"Conventional commits is a specification for adding human and machine readable meaning to commit messages",source:"@site/docs/use-cases/enforce-conventional-commits.md",sourceDirName:"use-cases",slug:"/use-cases/enforce-conventional-commits",permalink:"/maester/docs/next/use-cases/enforce-conventional-commits",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/use-cases/enforce-conventional-commits.md",tags:[],version:"current",frontMatter:{title:"Enforce conventional commits",id:"enforce-conventional-commits"},sidebar:"DocsSidebar",previous:{title:"Enforce branch conventions",permalink:"/maester/docs/next/use-cases/enforce-branch-conventions"},next:{title:"Introduction to Reviewpad",permalink:"/maester/docs/next/reviewpad-file-specification/introduction-to-reviewpad"}},s={},l=[{value:"Enforce conventional commits",id:"enforce-conventional-commits",level:2}],m={toc:l};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0/"},"Conventional commits")," is a specification for adding human and machine readable meaning to commit messages"),(0,r.kt)("p",null,"Reviewpad can be used to check and provide an error message if a commit in a pull request do not comply with the conventional commits specification."),(0,r.kt)("h2",{id:"enforce-conventional-commits"},"Enforce conventional commits"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"api-version: reviewpad.com/v3.x\n\nmode: silent\nedition: professional\n\nrules:\n  - name: tautology\n    kind: patch\n    description: Always true\n    spec: 'true'\n\n  - name: does-not-have-linear-history\n    kind: patch\n    description: Does not have linear history\n    spec: '!$hasLinearHistory()'\n\nworkflows:\n  - name: lint-commits\n    description: Lint commit messages \n    if:\n      - rule: does-not-have-linear-history\n        extra-actions:\n          - '$warn(\"This pull request does not have linear history - please fix this!\")'\n      - rule: tautology\n        extra-actions:\n          - '$commitLint()'\n")))}p.isMDXComponent=!0}}]);