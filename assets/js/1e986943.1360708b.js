"use strict";(self.webpackChunkmaester=self.webpackChunkmaester||[]).push([[9268],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?i.createElement(f,l(l({ref:t},c),{},{components:n})):i.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<a;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3157:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const a={},l=void 0,o={type:"mdx",permalink:"/changelog/reviewpad-v220-lisbon-edition",source:"@site/src/pages/changelog/reviewpad-v220-lisbon-edition.md",description:"New features",frontMatter:{}},s=[{value:"New features \ud83d\udd25",id:"new-features",level:2},{value:"YAML Specification",id:"yaml-specification",level:3},{value:"Aladino Built-ins",id:"aladino-built-ins",level:3},{value:"Action",id:"action",level:3},{value:"Improvements \ud83d\ude80",id:"improvements",level:2},{value:"YAML Processing",id:"yaml-processing",level:3},{value:"Aladino Built-ins",id:"aladino-built-ins-1",level:3},{value:"Action",id:"action-1",level:3},{value:"New Contributors \ud83c\udf7b",id:"new-contributors",level:2}],u={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"new-features"},"New features \ud83d\udd25"),(0,r.kt)("h3",{id:"yaml-specification"},"YAML Specification"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignore-errors")," property - Specify if the GitHub action should ignore execution errors. The default value is ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," which means the action will fail if an error occurs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"labels")," now have a ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," property - Allow readable references to labels. For instance, a label can how have spaces or emojis.")),(0,r.kt)("h3",{id:"aladino-built-ins"},"Aladino Built-ins"),(0,r.kt)("h3",{id:"action"},"Action"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("inlineCode",{parentName:"li"},"assignTeamReviewer"),"/guides/built-ins#assignteamreviewer) - Assign a review to the provided team(s)."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("inlineCode",{parentName:"li"},"startsWith"),"/guides/built-ins#startswith) - Check whether a text starts with a certain sentence.")),(0,r.kt)("h2",{id:"improvements"},"Improvements \ud83d\ude80"),(0,r.kt)("h3",{id:"yaml-processing"},"YAML Processing"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fix ",(0,r.kt)("inlineCode",{parentName:"li"},"labels")," section processing by creating the label in the repository whenever the defined label does not exist.")),(0,r.kt)("h3",{id:"aladino-built-ins-1"},"Aladino Built-ins"),(0,r.kt)("h3",{id:"action-1"},"Action"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("inlineCode",{parentName:"li"},"assignRandomReviewer"),"/guides/built-ins#assignrandomreviewer) - Fetches assignees instead of collaborators. ",(0,r.kt)("em",{parentName:"li"},"This is because GitHub API does not provide the correct list of reposittory collaborators when using GitHub Action token.")),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("inlineCode",{parentName:"li"},"addLabel"),"/guides/built-ins#addlabel) - Automatically creates the label if it does not exist and uses the labels section to retrieve name."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("inlineCode",{parentName:"li"},"removeLabel"),"/guides/built-ins#removelabel) - Uses the labels section to retrieve name.")),(0,r.kt)("h2",{id:"new-contributors"},"New Contributors \ud83c\udf7b"),(0,r.kt)("p",null,"Many thanks to our new contributors \ud83d\udc4f"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/dukex"},"@dukex")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/GildedHonour"},"@GildedHonour")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/thedevsaddam"},"@thedevsaddam"))))}c.isMDXComponent=!0}}]);