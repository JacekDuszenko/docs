"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4986],{21742:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>p,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),i=n(90814);const l='workflows:\n  - name: merge\n    run:\n      # Filter the list of reviewers to only those who are in the maintainers team\n      # and check that there is at least one reviewer in the list.\n      # The expression is wrapped in quotes to avoid YAML parsing errors.\n      if: \'$length($filter($reviewers(), ($r: String => $isElementOf($r, $team("maintainers"))))) == 0\'\n      then: $info("No maintainer has reviewed the pull request yet")\n',s={},p=void 0,o={unversionedId:"guides/built-ins/functions/filter/index",id:"guides/built-ins/functions/filter/index",title:"index",description:"Description:",source:"@site/docs/guides/built-ins/functions/filter/index.mdx",sourceDirName:"guides/built-ins/functions/filter",slug:"/guides/built-ins/functions/filter/",permalink:"/next/guides/built-ins/functions/filter/",draft:!1,editUrl:"https://github.com/reviewpad/docs/tree/main/docs/guides/built-ins/functions/filter/index.mdx",tags:[],version:"current",frontMatter:{}},d={},m=[],u={toc:m},k="wrapper";function c(t){let{components:e,...n}=t;return(0,r.kt)(k,(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description"),":"),(0,r.kt)("p",null,"Filters the elements in the slice based on whether they satisfy a given predicate."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"slice")),(0,r.kt)("td",{parentName:"tr",align:"left"},"[","]string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The slice of strings.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"predicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(string => boolean)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The predicate over string.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return value"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"[","]string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The elements of the slice that satisfy the given predicate.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'\'$filter(["aa", "ab", "bb", "cc"], ($e: String => $startsWith($e, "a")))\' # ["aa", "ab"]\n')),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,r.kt)(i.Z,{language:"yml",title:"reviewpad.yml",mdxType:"CodeBlock"},l))}c.isMDXComponent=!0}}]);