"use strict";(self.webpackChunkmaester=self.webpackChunkmaester||[]).push([[604],{359:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>k,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=n(7462),l=(n(7294),n(3905)),r=n(814);const i={title:"Aladino Built-ins",id:"aladino-built-ins"},p=void 0,s={unversionedId:"reviewpad-file-specification/aladino-specification/aladino-built-ins",id:"version-3.0.1/reviewpad-file-specification/aladino-specification/aladino-built-ins",title:"Aladino Built-ins",description:"One of the key advantages of using Reviewpad is that you can access a set of built-in functions and actions that allow for flexible specifications and actions.",source:"@site/versioned_docs/version-3.0.1/reviewpad-file-specification/aladino-specification/aladino-built-ins.mdx",sourceDirName:"reviewpad-file-specification/aladino-specification",slug:"/reviewpad-file-specification/aladino-specification/aladino-built-ins",permalink:"/maester/docs/reviewpad-file-specification/aladino-specification/aladino-built-ins",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-3.0.1/reviewpad-file-specification/aladino-specification/aladino-built-ins.mdx",tags:[],version:"3.0.1",frontMatter:{title:"Aladino Built-ins",id:"aladino-built-ins"},sidebar:"DocsSidebar",previous:{title:"Aladino Semantics",permalink:"/maester/docs/reviewpad-file-specification/aladino-specification/aladino-semantics"},next:{title:"Install Reviewpad GitHub Action",permalink:"/maester/docs/installation/install-reviewpad-github-action"}},o={},m=[{value:"Functions",id:"functions",level:2},{value:"Pull Request",id:"pull-request",level:2},{value:"assignees",id:"assignees",level:3},{value:"author",id:"author",level:3},{value:"base",id:"base",level:3},{value:"changed \u26a1",id:"changed",level:3},{value:"commentCount",id:"commentcount",level:3},{value:"comments",id:"comments",level:3},{value:"commitCount",id:"commitcount",level:3},{value:"commits",id:"commits",level:3},{value:"createdAt",id:"createdat",level:3},{value:"description",id:"description",level:3},{value:"fileCount",id:"filecount",level:3},{value:"hasAnnotation \u26a1",id:"hasannotation",level:3},{value:"hasCodePattern",id:"hascodepattern",level:3},{value:"hasFileExtensions",id:"hasfileextensions",level:3},{value:"hasFileName",id:"hasfilename",level:3},{value:"hasFilePattern",id:"hasfilepattern",level:3},{value:"hasLinearHistory",id:"haslinearhistory",level:3},{value:"hasLinkedIssues",id:"haslinkedissues",level:3},{value:"hasUnaddressedReviewThreads",id:"hasunaddressedreviewthreads",level:3},{value:"head",id:"head",level:3},{value:"isDraft",id:"isdraft",level:3},{value:"isWaitingForReview",id:"iswaitingforreview",level:3},{value:"labels",id:"labels",level:3},{value:"milestone",id:"milestone",level:3},{value:"reviewers",id:"reviewers",level:3},{value:"reviewerStatus",id:"reviewerstatus",level:3},{value:"size",id:"size",level:3},{value:"title",id:"title",level:3},{value:"workflowStatus",id:"workflowstatus",level:3},{value:"Organization",id:"organization",level:2},{value:"organization",id:"organization-1",level:3},{value:"team \ud83d\udd11",id:"team",level:3},{value:"User",id:"user",level:2},{value:"totalCreatedPullRequests",id:"totalcreatedpullrequests",level:3},{value:"Utilities",id:"utilities",level:2},{value:"append",id:"append",level:3},{value:"contains",id:"contains",level:3},{value:"isElementOf",id:"iselementof",level:3},{value:"length",id:"length",level:3},{value:"startsWith",id:"startswith",level:3},{value:"Engine",id:"engine",level:2},{value:"group",id:"group",level:3},{value:"rule",id:"rule",level:3},{value:"Actions",id:"actions",level:2},{value:"addLabel",id:"addlabel",level:3},{value:"assignAssignees \ud83d\udd11",id:"assignassignees",level:3},{value:"assignRandomReviewer",id:"assignrandomreviewer",level:3},{value:"assignReviewer",id:"assignreviewer",level:3},{value:"assignTeamReviewer",id:"assignteamreviewer",level:3},{value:"close",id:"close",level:3},{value:"commitLint \u26a1",id:"commitlint",level:3},{value:"comment",id:"comment",level:3},{value:"commentOnce",id:"commentonce",level:3},{value:"disableActions",id:"disableactions",level:3},{value:"error \u26a1",id:"error",level:3},{value:"fail",id:"fail",level:3},{value:"info \u26a1",id:"info",level:3},{value:"merge \ud83d\udd11",id:"merge",level:3},{value:"removeLabel",id:"removelabel",level:3},{value:"warn \u26a1",id:"warn",level:3}],u={toc:m};function k(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"One of the key advantages of using Reviewpad is that you can access a set of built-in functions and actions that allow for flexible specifications and actions."),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Reviewpad functions allow to query data from a ",(0,l.kt)("inlineCode",{parentName:"p"},"pull request")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"organization")," in order to act on it."),(0,l.kt)("p",null,"The functions are organized into 4 categories:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"#pull-request"},"Pull Request"))," - Functions to query pull request data."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"#organization"},"Organization"))," - Functions to query organization data."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"#user"},"User"))," - Functions to query user's data."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"#utilities"},"Utilities"))," - Functions to help act on the queried data."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"#engine"},"Engine"))," - Functions used to work with ",(0,l.kt)("inlineCode",{parentName:"li"},"reviewpad.yml")," file.")),(0,l.kt)("h2",{id:"pull-request"},"Pull Request"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Set of functions to get pull request details."),(0,l.kt)("h3",{id:"assignees"},"assignees"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the list of GitHub user login that are assigned to the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]string")),(0,l.kt)("p",null,"The list of GitHub user login that are assigned to the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$assignees()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: assignedToTechLead\n    kind: patch\n    description: Verifies if pull request was assigned only to a specific tech lead\n    spec: $assignees() == ["john"]'),(0,l.kt)("h3",{id:"author"},"author"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Retrieves the pull request author GitHub login."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The GitHub login of the pull request author."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$author()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: isAuthoredByTechLead\n    kind: patch\n    description: Verifies if authored by tech lead\n    spec: $author() == "john"'),(0,l.kt)("h3",{id:"base"},"base"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the name of the branch the pull request should be pulled into."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The name of the branch the pull request should be pulled into."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$base()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: shouldNotifyTechLead\n    kind: patch\n    description: Verifies if pull request is going to be pulled into "features" branch\n    spec: $base() == "features"'),(0,l.kt)("h3",{id:"changed"},"changed \u26a1"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u26a1 Professional Edition (","*",")")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(","*",") It requires Reviewpad ",(0,l.kt)("inlineCode",{parentName:"em"},"edition")," to be set to ",(0,l.kt)("inlineCode",{parentName:"em"},"professional")," on ",(0,l.kt)("inlineCode",{parentName:"em"},"reviewpad.yml"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"edition: professional\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"This built-in receives two regexes with named capturing groups denoted by the ",(0,l.kt)("inlineCode",{parentName:"p"},"@X")," pattern.",(0,l.kt)("br",{parentName:"p"}),"\n","These regexes are matched against the set of files in the patch.",(0,l.kt)("br",{parentName:"p"}),"\n","The built-in checks if the value set of the first regex is contained in the second one."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"preFilePattern")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"antecedent file pattern expression")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"postFilePattern")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"consequent file pattern expression")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the value set of the first regex is contained in the second one, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$changed("@1.go", "@1.md")\n')),(0,l.kt)("p",null,"This spec will return ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if for each file in the patch with the extension ",(0,l.kt)("inlineCode",{parentName:"p"},".go"),(0,l.kt)("br",{parentName:"p"}),"\n","there is also a file in the patch with the same name with the extension ",(0,l.kt)("inlineCode",{parentName:"p"},".md"),"."),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: does-not-modify-tests\n    kind: patch\n    description: Does not modify test files\n    spec: \'!$changed("src/@1.java", "test/@1.java")\''),(0,l.kt)("h3",{id:"commentcount"},"commentCount"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the total number of comments made into the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"int")),(0,l.kt)("p",null,"The total number of comments in the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$commentCount()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: hasNoComments\n    kind: patch\n    description: Verifies if it has no comments\n    spec: $commentCount() == 0"),(0,l.kt)("h3",{id:"comments"},"comments"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the list of comment body of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]string")),(0,l.kt)("p",null,"The list of comment body of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$comments()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: hasShipItComment\n    kind: patch\n    description: Verifies if any of the comment body of the pull request contains "ship it"\n    spec: $elemContains("ship it", $comments())'),(0,l.kt)("h3",{id:"commitcount"},"commitCount"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the total number of commits made into the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"int")),(0,l.kt)("p",null,"The total number of commits in the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$commitCount()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: hasTooManyCommits\n    kind: patch\n    description: Verifies if it has than 3 commits\n    spec: $commitCount() > 3"),(0,l.kt)("h3",{id:"commits"},"commits"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the list of commit messages of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]string")),(0,l.kt)("p",null,"The list of commit messages of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$commits()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: skipCIOnCommitMention\n    kind: patch\n    description: Verifies if any of the commit messages of the pull request contains "skip-ci"\n    spec: $elemContains("skip-ci", $commits())'),(0,l.kt)("h3",{id:"createdat"},"createdAt"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the time the pull request was created at."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"int64")),(0,l.kt)("p",null,"The number of seconds elapsed since January 1, 1970 UTC."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$createdAt()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: wasCreatedOnApril\n    kind: patch\n    description: Verifies if the pull request was created on the April 14th of 2011 at 16:00:49\n    spec: $createdAt() == "2011-04-14T16:00:49Z'),(0,l.kt)("h3",{id:"description"},"description"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the description of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The description of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$description()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: hasDescription\n    kind: patch\n    description: Verifies if the pull request description is "Testing description"\n    spec: $description() == "Testing description"'),(0,l.kt)("h3",{id:"filecount"},"fileCount"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the total number of files changed in the patch."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"int")),(0,l.kt)("p",null,"The total number of files changed in the patch."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$fileCount()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: changesTooManyFiles\n    kind: patch\n    description: Verifies if it has than 3 files\n    spec: $fileCount() > 3"),(0,l.kt)("h3",{id:"hasannotation"},"hasAnnotation \u26a1"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u26a1 Professional Edition (","*",")")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(","*",") It requires Reviewpad ",(0,l.kt)("inlineCode",{parentName:"em"},"edition")," to be set to ",(0,l.kt)("inlineCode",{parentName:"em"},"professional")," on ",(0,l.kt)("inlineCode",{parentName:"em"},"reviewpad.yml"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"edition: professional\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Verifies if the patch contains a symbol with the provided annotation, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"annotation")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"annotation to look for in the patch")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the patch changes a symbol with the provided annotation, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$hasAnnotation("critical")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: changesCritical\n    kind: patch\n    description: Verifies if changes critical code\n    spec: $hasAnnotation("critical")'),(0,l.kt)("h3",{id:"hascodepattern"},"hasCodePattern"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Verifies if the patch matches the provided code pattern, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,"The code pattern needs to be a compilable regular expression."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"queryPattern")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"query pattern to look for on patch")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the patch matches the code query, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$hasCodePattern("placeBet\\(.*\\)")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: usesPlaceBet\n    kind: patch\n    description: Verifies if uses placeBet\n    spec: $hasCodePattern("placeBet\\(.*\\)")'),(0,l.kt)("h3",{id:"hasfileextensions"},"hasFileExtensions"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Determines whether all the extensions of the changed files on the patch are included on the provided list of file extensions, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,"Each extension provided on the list needs to be a ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Glob_(programming)"},"glob"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"extensions")),(0,l.kt)("td",{parentName:"tr",align:null},"[","]string"),(0,l.kt)("td",{parentName:"tr",align:null},"list of all file extensions")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if all file extensions in the patch are included in the list, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$hasFileExtensions([".test.ts"])\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: changesAreOnlyTests\n    kind: patch\n    description: Verifies if changes are only on test files\n    spec: $hasFileExtensions([".test.ts"])'),(0,l.kt)("h3",{id:"hasfilename"},"hasFileName"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Determines whether the provided filename is among the files on patch, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"filename")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"filename to look for in the patch. case sensitive.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the patch has a file with the provided filename, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,"The provided filename and the filename on the patch need to be exactly the same in order to get a positive result."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$hasFileName("placeBet.js")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: changesPlaceBet\n    kind: patch\n    description: Verifies if changes place bet file\n    spec: $hasFileName("placeBet.js")'),(0,l.kt)("h3",{id:"hasfilepattern"},"hasFilePattern"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Determines whether the provided file pattern matches any of the files in the patch, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,"The file pattern needs to be a ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Glob_(programming)"},"glob"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"filePattern")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"file pattern glob to look for on patch")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if any of the files on patch matches the provided file pattern, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$hasFilePattern("src/transactions/**")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: changesTransactions\n    kind: patch\n    description: Verifies if changes transactions\n    spec: $hasFilePattern("src/transactions/**")'),(0,l.kt)("h3",{id:"haslinearhistory"},"hasLinearHistory"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Checks if a pull request has a linear history."),(0,l.kt)("p",null,"A linear history is simply a Git history in which all commits come after one another, i.e., you will not find any merges of branches with independent commit histories."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if it has a linear history. ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$hasLinearHistory()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: hasLinearHistory\n    kind: patch\n    description: Verifies if the pull request has a linear history\n    spec: $hasLinearHistory()"),(0,l.kt)("h3",{id:"haslinkedissues"},"hasLinkedIssues"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Checks if a pull request has associated issues that might be closed by it."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if it has linked issues. ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$hasLinkedIssues()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: hasLinkedIssues\n    kind: patch\n    description: Verifies if the pull request has linked issues\n    spec: $hasLinkedIssues()"),(0,l.kt)("h3",{id:"hasunaddressedreviewthreads"},"hasUnaddressedReviewThreads"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Verifies whether the pull request has review threads that are unaddressed, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,"A review thread is unaddressed when it is not ",(0,l.kt)("inlineCode",{parentName:"p"},"resolved")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"outdated"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A boolean which is ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the pull request has any review thread that is not ",(0,l.kt)("inlineCode",{parentName:"p"},"resolved")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"outdated"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$hasUnaddressedReviewThreads()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: requires-author-attention\n    kind: patch\n    description: Requires author to take action\n    spec: $hasUnaddressedReviewThreads()"),(0,l.kt)("h3",{id:"head"},"head"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the name of the branch where the pull request changes are implemented."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The name of the branch where the pull request changes are implemented."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$head()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: changesImplementedInDevelopmentBranch\n    kind: patch\n    description: Verifies if pull request changes are implemented in the "development" branch\n    spec: $head() == "development"'),(0,l.kt)("h3",{id:"isdraft"},"isDraft"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Verifies whether the pull request is ",(0,l.kt)("inlineCode",{parentName:"p"},"Draft"),", returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,"To know more about ",(0,l.kt)("a",{parentName:"p",href:"https://github.blog/2019-02-14-introducing-draft-pull-requests/"},"GitHub Draft pull request"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A boolean which is ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the pull request is ",(0,l.kt)("inlineCode",{parentName:"p"},"Draft"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$isDraft()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: isDraft\n    kind: patch\n    description: Verifies if is Draft\n    spec: $isDraft()"),(0,l.kt)("h3",{id:"iswaitingforreview"},"isWaitingForReview"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Verifies whether a pull request is waiting for review, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,"A pull request is set as waiting for review when there are ",(0,l.kt)("strong",{parentName:"p"},"requested reviewers")," or when there's at least of one reviewer whose last review is ",(0,l.kt)("strong",{parentName:"p"},"outdated"),"."),(0,l.kt)("p",null,"An outdated review is a review submitted before the last pull request update and whose state is not approved."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"A boolean which is ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the pull request is waiting for review, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$isWaitingForReview()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: isWaitingForReview\n    kind: patch\n    description: Verifies if pull request is waiting for review\n    spec: $isWaitingForReview()"),(0,l.kt)("h3",{id:"labels"},"labels"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the list of labels of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]string")),(0,l.kt)("p",null,"The list of labels of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$labels()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: onlyHasTestLabelAssigned\n    kind: patch\n    description: Verifies if the pull request only has "test" label assigned\n    spec: $labels() == ["test"]'),(0,l.kt)("h3",{id:"milestone"},"milestone"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the milestone title associated to the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The milestone title associated to the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$milestone()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: isPartOfBugFixesMilestone\n    kind: patch\n    description: Verifies if the pull request is associated with the bug fixes milestone\n    spec: $milestone() == "Bug fixes"'),(0,l.kt)("h3",{id:"reviewers"},"reviewers"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the list of GitHub user login or team slug that were requested to review the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]string")),(0,l.kt)("p",null,"The list of GitHub user login or team slug that were requested to review the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$reviewers()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: hasRequestedReviewers\n    kind: patch\n    description: Verifies if the pull request has reviewers\n    spec: $reviewers() != []"),(0,l.kt)("h3",{id:"reviewerstatus"},"reviewerStatus"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the status of a reviewer in the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"reviewerLogin")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"the GitHub login of the reviewer")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The status of a reviewer. It can be one of four string values:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},'""'),", if there was no review from the reviewer;"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},'"COMMENTED"'),", if all the reviews from the reviewer were comments;"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},'"CHANGES_REQUESTED"'),", if the last review that was not a comment requested changes;"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},'"APPROVED"'),", if the last review that was not a comment requested changes;")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$reviewerStatus("marcelosousa")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: approved-by-marcelosousa\n    kind: patch\n    description: Checks if the pull request was approved by marcelosousa\n    spec: \'$reviewerStatus("marcelosousa") == "APPROVED"\''),(0,l.kt)("h3",{id:"size"},"size"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the total amount of changed lines in the patch."),(0,l.kt)("p",null,"Any added or removed line is considered a change. For instance, the following patch will have a ",(0,l.kt)("inlineCode",{parentName:"p"},"size")," of 2 (one line removed and one line added.)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-diff"},'function helloWorld() {\n-   return "Hello"\n+   return "Hello World"\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"int")),(0,l.kt)("p",null,"The sum of all changed lines in the patch."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$size()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: isBigChange\n    kind: patch\n    description: Verifies if change is big\n    spec: $size() > 100"),(0,l.kt)("h3",{id:"title"},"title"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the title of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The title of the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$title()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: hasTitle\n    kind: patch\n    description: Verifies if the pull request title is "Test custom builtins"\n    spec: $title() == "Test custom builtins"'),(0,l.kt)("h3",{id:"workflowstatus"},"workflowStatus"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the status of a workflow run."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"workflowName")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the workflow.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The status of the workflow run."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$workflowStatus("reviewpad")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: reviewpad-successful\n    kind: patch\n    description: Verifies if reviewpad run was successful\n    spec: \'$workflowStatus("reviewpad") == "success"\''),(0,l.kt)("h2",{id:"organization"},"Organization"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Set of functions to get organization details."),(0,l.kt)("h3",{id:"organization-1"},"organization"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Lists all the members of the organization that owns the pull request."),(0,l.kt)("p",null,"If the authenticated user is an owner of the organization, this will return both concealed and public members, otherwise it will only return public members."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]string")),(0,l.kt)("p",null,"The list of all members of the organization to where the pull request running against."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$organization()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: isAuthorFromOrganization\n    kind: patch\n    description: Verifies if author belongs to organization\n    spec: $isElementOf($author(), $organization())"),(0,l.kt)("h3",{id:"team"},"team \ud83d\udd11"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the members of a team and child teams."),(0,l.kt)("p",null,"To list members in a team, the team must be visible to the authenticated user."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u26a0\ufe0f Requires a GitHub token \u26a0\ufe0f")))),(0,l.kt)("p",null,"By default a GitHub action does not have permission to access organization members."),(0,l.kt)("p",null,"Because of that, in order for the function ",(0,l.kt)("inlineCode",{parentName:"p"},"team")," to work we need to provide a GitHub token to the Reviewpad action."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"../../installation/install-reviewpad-github-action-with-a-github-token"},"Please follow this link to know more"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"teamSlug")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The slug of the team name on GitHub.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]string")),(0,l.kt)("p",null,"Returns the list of all team and child teams members GitHub login."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$team("devops")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: isAuthorByDevops\n    description: Verifies if author belongs to devops team\n    kind: patch\n    spec: $isElementOf($author(), $team("devops"))'),(0,l.kt)("h2",{id:"user"},"User"),(0,l.kt)("p",null,"Set of functions to get user details."),(0,l.kt)("h3",{id:"totalcreatedpullrequests"},"totalCreatedPullRequests"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Returns the total number of pull requests created by the provided GitHub user login."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"userLogin")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"the GitHub user login")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"int")),(0,l.kt)("p",null,"The total number of created pull requests created by GitHub user login."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$totalCreatedPullRequests($author())\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: isJunior\n    kind: patch\n    description: Verifies if author is junior\n    spec: $totalCreatedPullRequests($author()) < 3"),(0,l.kt)("h2",{id:"utilities"},"Utilities"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Set of functions to help handle the queried data."),(0,l.kt)("h3",{id:"append"},"append"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Appends elements to the end of a slice and returns the updated slice."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"slice")),(0,l.kt)("td",{parentName:"tr",align:null},"[","]string"),(0,l.kt)("td",{parentName:"tr",align:null},"slice that will have elements appended to it")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"elements")),(0,l.kt)("td",{parentName:"tr",align:null},"[","]string"),(0,l.kt)("td",{parentName:"tr",align:null},"elements to be added to the end of the slice")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]string")),(0,l.kt)("p",null,"Returns a new slice by appending the slices passed to it."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$append(["a", "b"], ["c"])    # ["a", "b", "c"]\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'groups:\n  - name: frontendAndBackendDevs\n    description: Frontend and backend developers\n    kind: developers\n    spec: $append($team("frontend"), $team("backend"))\n\nrules:\n  - name: authoredByWebDeveloper\n    kind: patch\n    description: Authored by web developers\n    spec: $isElementOf($author(), $group("frontendAndBackendDevs"))'),(0,l.kt)("h3",{id:"contains"},"contains"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Determines whether a text includes a certain sentence, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"text")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The text to search in")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"searchSentence")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The sentence to search for")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if searchSentence is found within the text, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$contains("Testing string contains", "string contains")     #true\n$contains("Testing string contains", "test")                #false\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: hasCustomKeywordInTitle\n    kind: patch\n    description: Verifies if the pull request title has "custom" keyword\n    spec: $contains($title(), "custom")'),(0,l.kt)("h3",{id:"iselementof"},"isElementOf"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Determines whether a list includes a certain value among its entries, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"searchElement")),(0,l.kt)("td",{parentName:"tr",align:null},"literal"),(0,l.kt)("td",{parentName:"tr",align:null},"The value to search for")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list")),(0,l.kt)("td",{parentName:"tr",align:null},"[","]literal"),(0,l.kt)("td",{parentName:"tr",align:null},"The list to search in")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if searchElement is found within the list, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$isElementOf("john", ["maria", "john"])  # true\n$isElementOf(3, [1, 2])                  # false\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: authoredByJunior\n    description: Verifies if author is junior\n    kind: patch\n    spec: $isElementOf($author(), $group("junior"))'),(0,l.kt)("h3",{id:"length"},"length"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Length returns the length of an array."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},"[","]string"),(0,l.kt)("td",{parentName:"tr",align:null},"array of elements")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"int")),(0,l.kt)("p",null,"Returns the lenght of the array."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$length(["a", "b"])  # 2\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: has-at-least-one-reviewer\n    kind: patch\n    description: Has more than one reviewer\n    spec: '$length($reviewers) > 1'"),(0,l.kt)("h3",{id:"startswith"},"startsWith"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Determines whether a text starts with a certain sentence, returning ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," as appropriate."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"text")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The text to search in")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"prefix")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The prefix")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,l.kt)("inlineCode",{parentName:"p"},"prefix")," is a prefix of ",(0,l.kt)("inlineCode",{parentName:"p"},"text"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$startsWith("Testing string contains", "Test")     #true\n$startsWith("Testing string contains", "string contains")      #false\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'rules:\n  - name: isDevBranch\n    kind: patch\n    description: Verifies if the head branch of the pull requests starts with dev\n    spec: $startsWith($head(), "dev/")'),(0,l.kt)("h2",{id:"engine"},"Engine"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Set of functions used to handle ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," file."),(0,l.kt)("p",null,"This functions should be used to access and handle data declared into ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml"),", e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"$group")," to get a defined group."),(0,l.kt)("h3",{id:"group"},"group"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Lists all members that belong to the provided group. This group needs to be defined in the same ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," file."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"group")," is a way to refer to a defined set of users in a short way."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"groupName")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"the group name to list the member from")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]string")),(0,l.kt)("p",null,"Returns all members from the group."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$group("techLeads")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'groups:\n  - name: techLeads\n    description: Group with all tech leads\n    kind: developers\n    spec: \'["john", "maria", "arthur"]\'\n\nrules:\n  - name: isAuthorByTechLead\n    description: Verifies if author is a tech lead\n    kind: patch\n    spec: $isElementOf($author(), $group("techLeads"))'),(0,l.kt)("h3",{id:"rule"},"rule"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Evaluates a rule. This rule needs to be defined in the same ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," file."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ruleName")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"the rule name")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("p",null,"Returns the evaluation of the rule."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$rule("isSmall")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"rules:\n  - name: isSmall\n    description: Small pull request\n    kind: patch\n    spec: '$size() > 10'\n\n  - name: isNotSmall\n    description: Not a small pull request\n    kind: patch\n    spec: '!$rule(isSmall)'"),(0,l.kt)("h2",{id:"actions"},"Actions"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"addlabel"},"addLabel"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Adds a label to the pull request."),(0,l.kt)("p",null,"If the label is not applied to the pull request then nothing happens."),(0,l.kt)("p",null,"It will check if there is a label with this key in the labels section of reviewpad.yml."),(0,l.kt)("p",null,"If such label exists, it will use name property of the label; if the property is not present, then it uses the key as the name."),(0,l.kt)("p",null,"If such label does not exist in labels, it will use the provided input string and create a label with that name."),(0,l.kt)("p",null,"Here's an example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'# ..\nlabels:\n  small:\n    name: "Small Change"\n    description: Few files\n  medium:\n    description: Some files\n# ...\nworkflows:\n  - name: Add label\n    if:\n      - rule: is-small\n        extra-actions:\n          - $addLabel("small")  # creates the label "Small Change" with description "Few files"\n          - $addLabel("medium") # creates the label "medium" with description "Some files"\n          - $addLabel("large")  # creates the label "large" without description'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"name of the label")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,"None."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$addLabel("bug")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: label-small-pull-request\n    description: Label small pull request\n    if:\n      - rule: isSmall\n    then:\n      - $addLabel("small")'),(0,l.kt)("h3",{id:"assignassignees"},"assignAssignees \ud83d\udd11"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Assigns up to 10 assignees to a pull request. "),(0,l.kt)("p",null,"Users already assigned to a pull request are not replaced."),(0,l.kt)("p",null,"Only users with push access can assign users to a pull request. Assignees are silently ignored otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"assignees")),(0,l.kt)("td",{parentName:"tr",align:null},"[","]string"),(0,l.kt)("td",{parentName:"tr",align:null},"list of GitHub logins to assign the pull request to")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$assignAssignees(["john", "marie", "peter"])\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"workflows:\n  - name: assign-to-author\n    description: Assign pull request to author\n    always-run: true\n    then:\n      - $assignAssignees([$author()])"),(0,l.kt)("h3",{id:"assignrandomreviewer"},"assignRandomReviewer"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Assigns a random user of the GitHub organization as the reviewer.",(0,l.kt)("br",{parentName:"p"}),"\n","This action will always pick a user different than the author of the pull request."),(0,l.kt)("p",null,"However, if the pull request already has a reviewer, nothing happens. This is to prevent",(0,l.kt)("br",{parentName:"p"}),"\n","adding a reviewer each time the pull request is updated."),(0,l.kt)("p",null,"When there's no reviewers to assign to, an error is returned."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$assignRandomReviewer()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"workflows:\n  - name: assign-random-reviewer\n    description: Assign random reviewer\n    if:\n      - rule: tautology\n    then:\n      - $assignRandomReviewer()"),(0,l.kt)("h3",{id:"assignreviewer"},"assignReviewer"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Assigns a defined amount of reviewers to the pull request from the provided list of reviewers."),(0,l.kt)("p",null,"When there are not enough reviewers to assign to, a warning is returned."),(0,l.kt)("p",null,"If a reviewer from the defined list has performed a review, their review will be re-requested."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"reviewers")),(0,l.kt)("td",{parentName:"tr",align:null},"[","]string"),(0,l.kt)("td",{parentName:"tr",align:null},"list of GitHub logins to select from")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"total")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"total of reviewers to assign. by default assigns to all reviewers")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$assignReviewer(["john", "marie", "peter"], 2)\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: review-code-from-new-joiners\n    description: Assign senior reviewers to PRs from new joiners\n    if:\n      - rule: authoredByJunior\n    then:\n      - $assignReviewer($group("seniors"), 2)'),(0,l.kt)("h3",{id:"assignteamreviewer"},"assignTeamReviewer"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Assigns a list of teams to review the pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"teamReviewers")),(0,l.kt)("td",{parentName:"tr",align:null},"[","]string"),(0,l.kt)("td",{parentName:"tr",align:null},"list of GitHub team slugs that will be requested to review")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$assignTeamReviewer(["core", "support"])\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: review-core-code\n    description: Assign review to core team when changes are made in critical code\n    if:\n      - rule: changesCritical\n    then:\n      - $assignTeamReviewer(["core"])'),(0,l.kt)("h3",{id:"close"},"close"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Closes a pull request."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$close()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"workflows:\n  - name: close-pull-request\n    description: Close pull request\n    if:\n      - rule: stalePullRequest\n    then:\n      - $close()"),(0,l.kt)("h3",{id:"commitlint"},"commitLint \u26a1"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u26a1 Professional Edition (","*",")")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(","*",") It requires Reviewpad ",(0,l.kt)("inlineCode",{parentName:"em"},"edition")," to be set to ",(0,l.kt)("inlineCode",{parentName:"em"},"professional")," on ",(0,l.kt)("inlineCode",{parentName:"em"},"reviewpad.yml"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"edition: professional\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Checks if the commits in the pull request follow the ",(0,l.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0/"},"conventional commits specification"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$commitLint()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"workflows:\n  - name: check-conventional-commits\n    description: Check conventional commits\n    if:\n      - rule: tautology\n    then:\n      - $commitLint()"),(0,l.kt)("h3",{id:"comment"},"comment"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Comments a pull request."),(0,l.kt)("p",null,"Note that this comment will always be added whenever this action is executed."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"comment")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"body of the comment")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$comment("This pull request has git conflicts. Please resolve them.")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: conflict\n    description: Ask to resolve conflict\n    if:\n      - rule: hasConflicts\n    then:\n      - $comment("This pull request has git conflicts. Please resolve them.")'),(0,l.kt)("h3",{id:"commentonce"},"commentOnce"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Comments a pull request once."),(0,l.kt)("p",null,"If the comment is already present, then the action does nothing."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"comment")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"body of the comment")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$commentOnce("This is your first contribution! Thank you!")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: comment-pull-request\n    description: Comment pull request\n    if:\n      - rule: firstContribution\n    then:\n      - $commentOnce("This is your first contribution! Thank you!")'),(0,l.kt)("h3",{id:"disableactions"},"disableActions"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Disables the list of Aladino actions passed as argument."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"actions")),(0,l.kt)("td",{parentName:"tr",align:null},"[","]string"),(0,l.kt)("td",{parentName:"tr",align:null},"the list of actions to be disabled")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$disableActions(["assignReviewer"])\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: reviewer-assignment-config\n    if:\n      - rule: is-draft\n    then:\n      - \'$disableActions(["assignReviewer", "assignTeamReviewer", "assignRandomReviewer"])\''),(0,l.kt)("h3",{id:"error"},"error \u26a1"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u26a1 Professional Edition (","*",")")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(","*",") It requires Reviewpad ",(0,l.kt)("inlineCode",{parentName:"em"},"edition")," to be set to ",(0,l.kt)("inlineCode",{parentName:"em"},"professional")," on ",(0,l.kt)("inlineCode",{parentName:"em"},"reviewpad.yml"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"edition: professional\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Add a message to the errors section of the report."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"comment")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"comment to be added in the errors")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$error("Please do not touch these files.")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: error-large-pull-requests\n    description: Error about large pull requests\n    if:\n      - rule: isLarge\n    then:\n      - $error("This pull request was considered too large.")'),(0,l.kt)("h3",{id:"fail"},"fail"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Fails the action with a given fail message which will appear in the logs of the GitHub action."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"failMessage")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"fail message")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$fail("please review the missing specs")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: fail-on-missing-specs\n    description: Fails the action on missing specs\n    if:\n      - rule: missingSpecs\n    then:\n      - $fail("please review the missing specs")'),(0,l.kt)("h3",{id:"info"},"info \u26a1"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u26a1 Professional Edition (","*",")")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(","*",") It requires Reviewpad ",(0,l.kt)("inlineCode",{parentName:"em"},"edition")," to be set to ",(0,l.kt)("inlineCode",{parentName:"em"},"professional")," on ",(0,l.kt)("inlineCode",{parentName:"em"},"reviewpad.yml"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"edition: professional\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Add a message to the info section of the report."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"comment")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"comment to be added in the informations")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$info("Please do not forget to add the tests.")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: info-large-pull-requests\n    description: Info about large pull requests\n    if:\n      - rule: isLarge\n    then:\n      - $info("This pull request was considered too large.")'),(0,l.kt)("h3",{id:"merge"},"merge \ud83d\udd11"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Merge a pull request with a specific merge method."),(0,l.kt)("p",null,"By default, if no parameter is provided, it will perform a standard git merge."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u26a0\ufe0f Requires GitHub token \u26a0\ufe0f")))),(0,l.kt)("p",null,"By default a GitHub action does not have permission to access organization members."),(0,l.kt)("p",null,"Because of that, in order for the function ",(0,l.kt)("inlineCode",{parentName:"p"},"team")," to work we need to provide a GitHub token to the Reviewpad action."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"../../installation/install-reviewpad-github-action-with-a-github-token"},"Please follow this link to know more"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"method")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"merge method (merge, rebase or squash)")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"none")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"$merge()\n")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},"workflows:\n  - name: auto-merge-small-pull-request\n    description: Auto-merge small pull request\n    if:\n      - rule: isSmall\n    then:\n      - $merge()"),(0,l.kt)("h3",{id:"removelabel"},"removeLabel"),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Removes a label applied to a pull request."),(0,l.kt)("p",null,"It will check if there is a label with this key in the labels section of reviewpad.yml."),(0,l.kt)("p",null,"If such label exists, it will use name property of the label; if the property is not present, then it uses the key as the name."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"name of the label")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value"),":"),(0,l.kt)("p",null,"Error if the label does not exist in the repository."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$removeLabel("bug")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: remove-small-label-in-pull-request\n    description: Remove small label applied to pull request\n    if:\n      - rule: isNotSmall\n    then:\n      - $removeLabel("small")'),(0,l.kt)("h3",{id:"warn"},"warn \u26a1"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u26a1 Professional Edition (","*",")")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(","*",") It requires Reviewpad ",(0,l.kt)("inlineCode",{parentName:"em"},"edition")," to be set to ",(0,l.kt)("inlineCode",{parentName:"em"},"professional")," on ",(0,l.kt)("inlineCode",{parentName:"em"},"reviewpad.yml"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"edition: professional\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description"),":"),(0,l.kt)("p",null,"Add a message to the warnings section of the report."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"variable"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"comment")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"comment to be added in the warnings")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'$warn("Please do not forget to add the tests.")\n')),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," example:"),(0,l.kt)(r.Z,{language:"yml",mdxType:"CodeBlock"},'workflows:\n  - name: warn-large-pull-requests\n    description: Warn about large pull requests\n    if:\n      - rule: isLarge\n    then:\n      - $warn("This pull request was considered too large.")'))}k.isMDXComponent=!0}}]);