"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6109],{4632:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var i=a(87462),n=(a(67294),a(3905));const r={},l=void 0,s={type:"mdx",permalink:"/changelog/reviewpad-v3190",source:"@site/src/pages/changelog/reviewpad-v3190.md",description:"Reviewpad v3.19.0",frontMatter:{}},o=[{value:"Reviewpad v3.19.0",id:"reviewpad-v3190",level:2},{value:"New features \ud83d\udd25",id:"new-features-",level:2},{value:"Built-ins",id:"built-ins",level:3},{value:"Bug \ud83d\udc1b",id:"bug",level:2}],u={toc:o},p="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,i.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"reviewpad-v3190"},(0,n.kt)("a",{parentName:"h2",href:"/changelog/reviewpad-v3190"},"Reviewpad v3.19.0")),(0,n.kt)("h2",{id:"new-features-"},"New features \ud83d\udd25"),(0,n.kt)("h3",{id:"built-ins"},"Built-ins"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/guides/built-ins#context"},(0,n.kt)("inlineCode",{parentName:"a"},"context"))," - Get a JSON serialized string of the current context (pull request / issue)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/guides/built-ins#filespath"},(0,n.kt)("inlineCode",{parentName:"a"},"filesPath"))," - Retrieve the list of all file paths changed in the pull request."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/guides/built-ins#join"},(0,n.kt)("inlineCode",{parentName:"a"},"join"))," - Concatenate an array of strings, using the specified separator between each member."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/guides/built-ins#matchstring"},(0,n.kt)("inlineCode",{parentName:"a"},"matchString"))," - Verify if a provided regular expression pattern is matched by a given text."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/guides/built-ins#selectfromcontext"},(0,n.kt)("inlineCode",{parentName:"a"},"selectFromContext"))," - Select arbitrary value(s) from the current context (pull request / issue) using a ",(0,n.kt)("a",{parentName:"li",href:"https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html"},"JSONPath")," expression."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/guides/built-ins#selectfromjson"},(0,n.kt)("inlineCode",{parentName:"a"},"selectFromJSON"))," - Select arbitrary value(s) from a JSON type using a ",(0,n.kt)("a",{parentName:"li",href:"https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html"},"JSONPath")," expression."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/guides/built-ins#setprojectfield"},(0,n.kt)("inlineCode",{parentName:"a"},"setProjectField"))," - Set the value of a ",(0,n.kt)("a",{parentName:"li",href:"https://docs.github.com/en/issues/planning-and-tracking-with-projects/understanding-fields"},"custom field")," of a GitHub project for the pull request / issue in the current context."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/guides/built-ins#tojson"},(0,n.kt)("inlineCode",{parentName:"a"},"toJSON"))," - Convert a JSON serialized string to a JSON object.")),(0,n.kt)("h2",{id:"bug"},"Bug \ud83d\udc1b"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/guides/built-ins#review"},(0,n.kt)("inlineCode",{parentName:"a"},"review"))," built-in now properly creates a review for a pull request.")))}d.isMDXComponent=!0}}]);