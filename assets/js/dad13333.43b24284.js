"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2875],{3849:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=r(7462),o=(r(7294),r(3905)),t=r(814);const s={title:"Enforce branch conventions",id:"enforce-branch-conventions",slug:"/use-cases/enforce-branch-conventions"},c=void 0,i={unversionedId:"use-cases/enforce-branch-conventions/enforce-branch-conventions",id:"use-cases/enforce-branch-conventions/enforce-branch-conventions",title:"Enforce branch conventions",description:"",source:"@site/docs/use-cases/enforce-branch-conventions/index.mdx",sourceDirName:"use-cases/enforce-branch-conventions",slug:"/use-cases/enforce-branch-conventions",permalink:"/next/use-cases/enforce-branch-conventions",draft:!1,editUrl:"https://github.com/reviewpad/docs/tree/main/docs/use-cases/enforce-branch-conventions/index.mdx",tags:[],version:"current",frontMatter:{title:"Enforce branch conventions",id:"enforce-branch-conventions",slug:"/use-cases/enforce-branch-conventions"},sidebar:"DocsSidebar",previous:{title:"Comment on pull requests",permalink:"/next/use-cases/comment-on-pull-requests"},next:{title:"Enforce conventional commits",permalink:"/next/use-cases/enforce-conventional-commits"}},l={},d=[{value:"Enforce branch name and add label based on branches",id:"enforce-branch-name-and-add-label-based-on-branches",level:2}],u={toc:d};function p(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To maintain consistency of development and best practices of CI/CD, it is important to enforce a policy of branch naming."),(0,o.kt)("p",null,"Reviewpad can be used to enforce a branch naming policy and also automatically add labels based on the branch names."),(0,o.kt)("h2",{id:"enforce-branch-name-and-add-label-based-on-branches"},"Enforce branch name and add label based on branches"),(0,o.kt)(t.Z,{language:"yml",title:"reviewpad.yml",mdxType:"CodeBlock"},'api-version: reviewpad.com/v3.x\r\n\r\nlabels:\r\n  type-bugfix:\r\n    name: \'type:bugfix :beetle:\'\r\n    description: Provides a bug fix\r\n    color: F9B1C9\r\n  type-feature:\r\n    name: \'type:feature :rocket:\'\r\n    description: Provides a new feature\r\n    color: 65ECA3\r\n  type-support:\r\n    name: \'type:support :hammer:\'\r\n    description: Provides a misc change\r\n    color: CDDBDC\r\n\r\nworkflows:\r\n  - name: enforce-branch-naming\r\n    if:\r\n      - rule: $startsWith($head(), "bugfix/")\r\n        extra-actions:\r\n          - $addLabel("type-bugfix")\r\n      - rule: $startsWith($head(), "feature/")\r\n        extra-actions:\r\n          - $addLabel("type-feature")\r\n      - rule: $startsWith($head(), "support/")\r\n        extra-actions:\r\n          - $addLabel("type-support")\r\n\r\n  - name: default-policy\r\n    description: By default it will put a warning\r\n    if:\r\n      - \'true\'\r\n    then:\r\n      - $addLabel("needs-review")\r\n      # The expression is wrapped in quotes to avoid YAML parsing errors\r\n      - \'$warn("All branches must use the following nomenclature: prefix/name where prefix can be one of: bugfix, enhancement, feature, hotfix or support.")\'\r\n\r\n  - name: require-linear-history\r\n    always-run: true\r\n    if:\r\n      - $hasLinearHistory() == false\r\n    then:\r\n      - $warn("This pull request does not have linear history - please fix this!")\r\n'))}p.isMDXComponent=!0}}]);