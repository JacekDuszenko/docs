"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3502],{2219:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),t=(a(7294),a(3905)),s=a(814);const i={title:"Auto-merge",id:"auto-merge",slug:"/use-cases/auto-merge"},o=void 0,l={unversionedId:"use-cases/auto-merge/auto-merge",id:"use-cases/auto-merge/auto-merge",title:"Auto-merge",description:"",source:"@site/docs/use-cases/auto-merge/index.mdx",sourceDirName:"use-cases/auto-merge",slug:"/use-cases/auto-merge",permalink:"/next/use-cases/auto-merge",draft:!1,editUrl:"https://github.com/reviewpad/docs/tree/main/docs/use-cases/auto-merge/index.mdx",tags:[],version:"current",frontMatter:{title:"Auto-merge",id:"auto-merge",slug:"/use-cases/auto-merge"},sidebar:"DocsSidebar",previous:{title:"Use cases",permalink:"/next/use-cases"},next:{title:"Automated Labelling",permalink:"/next/use-cases/automated-labelling"}},u={},p=[{value:"Auto-merge based on file properties",id:"auto-merge-based-on-file-properties",level:2},{value:"Auto-merge small pull requests",id:"auto-merge-small-pull-requests",level:2},{value:"Auto-merge non-critical pull requests",id:"auto-merge-non-critical-pull-requests",level:2},{value:"Auto-merge on required approvals",id:"auto-merge-on-required-approvals",level:2}],c={toc:p};function m(e){let{components:r,...a}=e;return(0,t.kt)("wrapper",(0,n.Z)({},c,a,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"The ability to configure automatic pull request merge can greatly unblock developers that typically wait for hours, or even days, to receive a LGTM review."),(0,t.kt)("p",null,"Since not every pull request needs the same review process, using the semantic features of Reviewpad, you can configure many scenarios where auto-merge seems natural."),(0,t.kt)("p",null,"Out of the box, Reviewpad supports a ",(0,t.kt)("a",{parentName:"p",href:"/guides/built-ins#merge"},"merge action")," which can be used in multiple scenarios."),(0,t.kt)("h2",{id:"auto-merge-based-on-file-properties"},"Auto-merge based on file properties"),(0,t.kt)(s.Z,{language:"yml",title:"reviewpad.yml",mdxType:"CodeBlock"},'api-version: reviewpad.com/v3.x\r\n\r\nlabels:\r\n  ship:\r\n    description: Ship mode\r\n    color: 76dbbe\r\n\r\nrules:\r\n  - name: only-docs-changes\r\n    spec: $hasFileExtensions([".md"])\r\n\r\nworkflows:\r\n  - name: ship\r\n    description: Ship process - bypass the review and merge with rebase\r\n    if:\r\n      - rule: only-docs-changes\r\n    then:\r\n      - $addLabel("ship")\r\n      - $merge()\r\n'),(0,t.kt)("h2",{id:"auto-merge-small-pull-requests"},"Auto-merge small pull requests"),(0,t.kt)(s.Z,{language:"yml",title:"reviewpad.yml",mdxType:"CodeBlock"},'api-version: reviewpad.com/v3.x\r\n\r\nlabels:\r\n  ship:\r\n    description: Ship mode\r\n    color: 76dbbe\r\n\r\ngroups:\r\n  - name: ignore-patterns\r\n    spec: \'["*.lock", "generated/**"]\'\r\n\r\nrules:\r\n  - name: is-small-patch\r\n    description: Patch has less than 90 changes and 6 files\r\n    spec: $size($group("ignore-patterns")) < 90 && $fileCount() <= 5\r\n\r\nworkflows:\r\n  - name: ship\r\n    description: Ship process - bypass the review and merge with rebase\r\n    if:\r\n      - rule: is-small-patch\r\n    then:\r\n      - $addLabel("ship")\r\n      - $merge("rebase")\r\n'),(0,t.kt)("h2",{id:"auto-merge-non-critical-pull-requests"},"Auto-merge non-critical pull requests"),(0,t.kt)("p",null,"The ",(0,t.kt)("a",{parentName:"p",href:"/guides/built-ins#hasannotation"},(0,t.kt)("strong",{parentName:"a"},"hasAnnotation"))," built-in can be used to configure powerful auto-merges. See a more in-depth example of the usage of ",(0,t.kt)("a",{parentName:"p",href:"/guides/built-ins#hasannotation"},(0,t.kt)("strong",{parentName:"a"},"hasAnnotation"))," in the ",(0,t.kt)("a",{parentName:"p",href:"/use-cases/label-critical-changes-with-semantic-code-annotations"},"automated labelling section"),"."),(0,t.kt)(s.Z,{language:"yml",title:"reviewpad.yml",mdxType:"CodeBlock"},'api-version: reviewpad.com/v3.x\r\n\r\nlabels:\r\n  ship:\r\n    description: Ship mode\r\n    color: 76dbbe\r\n\r\nrules:\r\n  - name: not-critical-changes\r\n    description: Patch does not touch critical code\r\n    spec: $hasAnnotation("critical") == false\r\n\r\nworkflows:\r\n  - name: ship\r\n    description: Ship process - bypass the review and merge with rebase\r\n    if:\r\n      - rule: not-critical-changes\r\n    then:\r\n      - $addLabel("ship")\r\n      - $merge("rebase")\r\n'),(0,t.kt)("h2",{id:"auto-merge-on-required-approvals"},"Auto-merge on required approvals"),(0,t.kt)("p",null,"In GitHub, repository administrators can require a minimum number of pull request approvals before merging into a protected branch."),(0,t.kt)("p",null,"However, we may want the required number of approvals to come from a defined set of users/team. In this case, GitHub does not offer this ability."),(0,t.kt)("p",null,"We can use Reviewpad to verify if a pull request has the required number of approvals from a specific team."),(0,t.kt)("p",null,"Here's an example of a ",(0,t.kt)("inlineCode",{parentName:"p"},"reviewpad.yml")," configuration that verifies if a pull request has at least 2 approvals from the core team when changes are critical."),(0,t.kt)(s.Z,{language:"yml",title:"reviewpad.yml",mdxType:"CodeBlock"},'api-version: reviewpad.com/v3.x\r\n\r\nrules:\r\n  - name: changes-critical-code\r\n    spec: $hasAnnotation("critical")\r\n\r\nworkflows:\r\n  - name: auto-merge-on-required-approvals\r\n    if:\r\n      - $rule("changes-critical-code") && $hasRequiredApprovals(2, $team("core"))\r\n    then:\r\n      - $merge()\r\n'))}m.isMDXComponent=!0}}]);