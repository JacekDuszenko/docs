"use strict";(self.webpackChunkmaester=self.webpackChunkmaester||[]).push([[499],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||u[d]||i;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},84849:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={title:"Comment on pull requests",id:"comment-on-pull-requests"},a=void 0,s={unversionedId:"use-cases/comment-on-pull-requests",id:"version-3.5.0/use-cases/comment-on-pull-requests",title:"Comment on pull requests",description:"With Reviewpad, you can automatically add comments to the pull request.",source:"@site/versioned_docs/version-3.5.0/use-cases/comment-on-pull-requests.md",sourceDirName:"use-cases",slug:"/use-cases/comment-on-pull-requests",permalink:"/3.5.0/use-cases/comment-on-pull-requests",draft:!1,editUrl:"https://github.com/reviewpad/docs/tree/main/docs/use-cases/comment-on-pull-requests.md",tags:[],version:"3.5.0",frontMatter:{title:"Comment on pull requests",id:"comment-on-pull-requests"},sidebar:"DocsSidebar",previous:{title:"Check issue description",permalink:"/3.5.0/use-cases/check-issue-description"},next:{title:"Enforce branch conventions",permalink:"/3.5.0/use-cases/enforce-branch-conventions"}},l={},c=[{value:"Automatically comment the pull request.",id:"automatically-comment-the-pull-request",level:2}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"With Reviewpad, you can automatically add comments to the pull request."),(0,o.kt)("p",null,"There are three different mechanisms to add a comment to the pull request:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Using the ",(0,o.kt)("a",{parentName:"li",href:"/guides/built-ins#comment"},(0,o.kt)("inlineCode",{parentName:"a"},"comment"))," action."),(0,o.kt)("li",{parentName:"ol"},"Using the ",(0,o.kt)("a",{parentName:"li",href:"/guides/built-ins#commentonce"},(0,o.kt)("inlineCode",{parentName:"a"},"commentOnce"))," action. "),(0,o.kt)("li",{parentName:"ol"},"Using the ",(0,o.kt)("a",{parentName:"li",href:"/guides/built-ins#error"},(0,o.kt)("inlineCode",{parentName:"a"},"error")),", ",(0,o.kt)("a",{parentName:"li",href:"/guides/built-ins#info"},(0,o.kt)("inlineCode",{parentName:"a"},"info"))," or ",(0,o.kt)("a",{parentName:"li",href:"/guides/built-ins#warn"},(0,o.kt)("inlineCode",{parentName:"a"},"warn"))," actions.")),(0,o.kt)("p",null,"The difference between the modes is that the ",(0,o.kt)("inlineCode",{parentName:"p"},"comment")," action will add a comment every time the action is executed, ",(0,o.kt)("inlineCode",{parentName:"p"},"commentOnce")," will add a comment once no matter the amount of times the action is executed, while the other commenting actions are bundled together in a comment which is also automatically updated. "),(0,o.kt)("p",null,"To the use the third set of comments (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"warn")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"info"),") you need to enable the ",(0,o.kt)("inlineCode",{parentName:"p"},"professional")," edition."),(0,o.kt)("h2",{id:"automatically-comment-the-pull-request"},"Automatically comment the pull request."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"api-version: reviewpad.com/v3.x\n\nmode: verbose\n\nrules:\n  - name: emptyDescription\n    spec: '$description() == \"\"'\n\n  - name: isFirstTimeContributor\n    spec: '$pullRequestCountBy($author()) == 1'\n\nworkflows:\n  - name: welcome-user\n    description: Welcome user first contribution\n    if:\n      - rule: isFirstTimeContributor\n    then:\n      # Comment on pull request once\n      - '$commentOnce(\"Well done! This is your first contribution.\")'\n\n  - name: comment-on-empty-description\n    description: Error on empty descriptions\n    if:\n      - rule: emptyDescription\n    then:\n      # Add error message to reviewpad report\n      - '$error(\"The description of the pull request cannot be empty\")'\n\n  - name: comment-on-pull-request\n    description: Example comment on pull request\n    if:\n      - 'true'\n    then:\n      # Add info message to reviewpad report\n      - '$info(\"Thanks for this pull request. @marcelosousa will take a look!\")'\n      # Add warning message to reviewpad report\n      - '$warn(\"Please make sure the CI is green before merging.\")'\n")),(0,o.kt)("p",null,"You can see this workflow in action the following ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/reviewpad/action-showcase/pull/17"},"pull request"),"."))}u.isMDXComponent=!0}}]);